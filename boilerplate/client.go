// Package boilerplate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package boilerplate

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDosen request
	GetDosen(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJadwalKuliah request
	GetJadwalKuliah(ctx context.Context, params *GetJadwalKuliahParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJadwalKuliahDosen request
	GetJadwalKuliahDosen(ctx context.Context, params *GetJadwalKuliahDosenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJadwalKuliahDosenKelas request
	GetJadwalKuliahDosenKelas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJadwalKuliahDosenMahasiswaWithBody request with any body
	PostJadwalKuliahDosenMahasiswaWithBody(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJadwalKuliahDosenMahasiswa(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, body PostJadwalKuliahDosenMahasiswaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJadwalKuliahDosenSaveTransWithBody request with any body
	PostJadwalKuliahDosenSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJadwalKuliahDosenSaveTrans(ctx context.Context, body PostJadwalKuliahDosenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJadwalKuliahDosenId request
	DeleteJadwalKuliahDosenId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJadwalKuliahSaveTransWithBody request with any body
	PostJadwalKuliahSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJadwalKuliahSaveTrans(ctx context.Context, body PostJadwalKuliahSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJadwalKuliahId request
	DeleteJadwalKuliahId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJamKuliah request
	GetJamKuliah(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLaporanPerkuliahan request
	GetLaporanPerkuliahan(ctx context.Context, params *GetLaporanPerkuliahanParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLaporanPerkuliahanSaveTransWithBody request with any body
	PostLaporanPerkuliahanSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLaporanPerkuliahanSaveTransWithFormdataBody(ctx context.Context, body PostLaporanPerkuliahanSaveTransFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLaporanPerkuliahanToPdfWithBody request with any body
	PostLaporanPerkuliahanToPdfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLaporanPerkuliahanToPdf(ctx context.Context, body PostLaporanPerkuliahanToPdfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLaporanPerkuliahanIdPertemuanPertemuan request
	DeleteLaporanPerkuliahanIdPertemuanPertemuan(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLaporanPerkuliahanIdPertemuanPertemuan request
	GetLaporanPerkuliahanIdPertemuanPertemuan(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMahasiswaAbsen request
	GetMahasiswaAbsen(ctx context.Context, params *GetMahasiswaAbsenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMahasiswaAbsenSaveTransWithBody request with any body
	PostMahasiswaAbsenSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMahasiswaAbsenSaveTrans(ctx context.Context, body PostMahasiswaAbsenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMahasiswaAbsenIdPertemuan request
	DeleteMahasiswaAbsenIdPertemuan(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMataKuliah request
	GetMataKuliah(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerubahanJadwal request
	GetPerubahanJadwal(ctx context.Context, params *GetPerubahanJadwalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPerubahanJadwalIdJadwalPertemuanWithBody request with any body
	PatchPerubahanJadwalIdJadwalPertemuanWithBody(ctx context.Context, idJadwalPertemuan int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPerubahanJadwalIdJadwalPertemuan(ctx context.Context, idJadwalPertemuan int, body PatchPerubahanJadwalIdJadwalPertemuanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToken request
	GetToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDosen(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDosenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJadwalKuliah(ctx context.Context, params *GetJadwalKuliahParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJadwalKuliahRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJadwalKuliahDosen(ctx context.Context, params *GetJadwalKuliahDosenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJadwalKuliahDosenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJadwalKuliahDosenKelas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJadwalKuliahDosenKelasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJadwalKuliahDosenMahasiswaWithBody(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJadwalKuliahDosenMahasiswaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJadwalKuliahDosenMahasiswa(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, body PostJadwalKuliahDosenMahasiswaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJadwalKuliahDosenMahasiswaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJadwalKuliahDosenSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJadwalKuliahDosenSaveTransRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJadwalKuliahDosenSaveTrans(ctx context.Context, body PostJadwalKuliahDosenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJadwalKuliahDosenSaveTransRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJadwalKuliahDosenId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJadwalKuliahDosenIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJadwalKuliahSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJadwalKuliahSaveTransRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJadwalKuliahSaveTrans(ctx context.Context, body PostJadwalKuliahSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJadwalKuliahSaveTransRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJadwalKuliahId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJadwalKuliahIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJamKuliah(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJamKuliahRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLaporanPerkuliahan(ctx context.Context, params *GetLaporanPerkuliahanParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLaporanPerkuliahanRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLaporanPerkuliahanSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLaporanPerkuliahanSaveTransRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLaporanPerkuliahanSaveTransWithFormdataBody(ctx context.Context, body PostLaporanPerkuliahanSaveTransFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLaporanPerkuliahanSaveTransRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLaporanPerkuliahanToPdfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLaporanPerkuliahanToPdfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLaporanPerkuliahanToPdf(ctx context.Context, body PostLaporanPerkuliahanToPdfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLaporanPerkuliahanToPdfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLaporanPerkuliahanIdPertemuanPertemuan(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLaporanPerkuliahanIdPertemuanPertemuanRequest(c.Server, idPertemuan)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLaporanPerkuliahanIdPertemuanPertemuan(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLaporanPerkuliahanIdPertemuanPertemuanRequest(c.Server, idPertemuan)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMahasiswaAbsen(ctx context.Context, params *GetMahasiswaAbsenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMahasiswaAbsenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMahasiswaAbsenSaveTransWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMahasiswaAbsenSaveTransRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMahasiswaAbsenSaveTrans(ctx context.Context, body PostMahasiswaAbsenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMahasiswaAbsenSaveTransRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMahasiswaAbsenIdPertemuan(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMahasiswaAbsenIdPertemuanRequest(c.Server, idPertemuan)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMataKuliah(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMataKuliahRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerubahanJadwal(ctx context.Context, params *GetPerubahanJadwalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPerubahanJadwalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPerubahanJadwalIdJadwalPertemuanWithBody(ctx context.Context, idJadwalPertemuan int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPerubahanJadwalIdJadwalPertemuanRequestWithBody(c.Server, idJadwalPertemuan, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPerubahanJadwalIdJadwalPertemuan(ctx context.Context, idJadwalPertemuan int, body PatchPerubahanJadwalIdJadwalPertemuanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPerubahanJadwalIdJadwalPertemuanRequest(c.Server, idJadwalPertemuan, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDosenRequest generates requests for GetDosen
func NewGetDosenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dosen")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJadwalKuliahRequest generates requests for GetJadwalKuliah
func NewGetJadwalKuliahRequest(server string, params *GetJadwalKuliahParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJadwalKuliahDosenRequest generates requests for GetJadwalKuliahDosen
func NewGetJadwalKuliahDosenRequest(server string, params *GetJadwalKuliahDosenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah-dosen/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJadwalKuliahDosenKelasRequest generates requests for GetJadwalKuliahDosenKelas
func NewGetJadwalKuliahDosenKelasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah-dosen/kelas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJadwalKuliahDosenMahasiswaRequest calls the generic PostJadwalKuliahDosenMahasiswa builder with application/json body
func NewPostJadwalKuliahDosenMahasiswaRequest(server string, params *PostJadwalKuliahDosenMahasiswaParams, body PostJadwalKuliahDosenMahasiswaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJadwalKuliahDosenMahasiswaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostJadwalKuliahDosenMahasiswaRequestWithBody generates requests for PostJadwalKuliahDosenMahasiswa with any type of body
func NewPostJadwalKuliahDosenMahasiswaRequestWithBody(server string, params *PostJadwalKuliahDosenMahasiswaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah-dosen/mahasiswa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJadwalKuliahDosenSaveTransRequest calls the generic PostJadwalKuliahDosenSaveTrans builder with application/json body
func NewPostJadwalKuliahDosenSaveTransRequest(server string, body PostJadwalKuliahDosenSaveTransJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJadwalKuliahDosenSaveTransRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJadwalKuliahDosenSaveTransRequestWithBody generates requests for PostJadwalKuliahDosenSaveTrans with any type of body
func NewPostJadwalKuliahDosenSaveTransRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah-dosen/save-trans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJadwalKuliahDosenIdRequest generates requests for DeleteJadwalKuliahDosenId
func NewDeleteJadwalKuliahDosenIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah-dosen/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJadwalKuliahSaveTransRequest calls the generic PostJadwalKuliahSaveTrans builder with application/json body
func NewPostJadwalKuliahSaveTransRequest(server string, body PostJadwalKuliahSaveTransJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJadwalKuliahSaveTransRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJadwalKuliahSaveTransRequestWithBody generates requests for PostJadwalKuliahSaveTrans with any type of body
func NewPostJadwalKuliahSaveTransRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah/save-trans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJadwalKuliahIdRequest generates requests for DeleteJadwalKuliahId
func NewDeleteJadwalKuliahIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jadwal-kuliah/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJamKuliahRequest generates requests for GetJamKuliah
func NewGetJamKuliahRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jam-kuliah")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLaporanPerkuliahanRequest generates requests for GetLaporanPerkuliahan
func NewGetLaporanPerkuliahanRequest(server string, params *GetLaporanPerkuliahanParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/laporan-perkuliahan/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLaporanPerkuliahanSaveTransRequestWithFormdataBody calls the generic PostLaporanPerkuliahanSaveTrans builder with application/x-www-form-urlencoded body
func NewPostLaporanPerkuliahanSaveTransRequestWithFormdataBody(server string, body PostLaporanPerkuliahanSaveTransFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostLaporanPerkuliahanSaveTransRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostLaporanPerkuliahanSaveTransRequestWithBody generates requests for PostLaporanPerkuliahanSaveTrans with any type of body
func NewPostLaporanPerkuliahanSaveTransRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/laporan-perkuliahan/save-trans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLaporanPerkuliahanToPdfRequest calls the generic PostLaporanPerkuliahanToPdf builder with application/json body
func NewPostLaporanPerkuliahanToPdfRequest(server string, body PostLaporanPerkuliahanToPdfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLaporanPerkuliahanToPdfRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLaporanPerkuliahanToPdfRequestWithBody generates requests for PostLaporanPerkuliahanToPdf with any type of body
func NewPostLaporanPerkuliahanToPdfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/laporan-perkuliahan/to-pdf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLaporanPerkuliahanIdPertemuanPertemuanRequest generates requests for DeleteLaporanPerkuliahanIdPertemuanPertemuan
func NewDeleteLaporanPerkuliahanIdPertemuanPertemuanRequest(server string, idPertemuan int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id-pertemuan", runtime.ParamLocationPath, idPertemuan)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/laporan-perkuliahan/%s/pertemuan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLaporanPerkuliahanIdPertemuanPertemuanRequest generates requests for GetLaporanPerkuliahanIdPertemuanPertemuan
func NewGetLaporanPerkuliahanIdPertemuanPertemuanRequest(server string, idPertemuan int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id-pertemuan", runtime.ParamLocationPath, idPertemuan)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/laporan-perkuliahan/%s/pertemuan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMahasiswaAbsenRequest generates requests for GetMahasiswaAbsen
func NewGetMahasiswaAbsenRequest(server string, params *GetMahasiswaAbsenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mahasiswa/absen")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "smtId", runtime.ParamLocationQuery, params.SmtId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kelasId", runtime.ParamLocationQuery, params.KelasId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMahasiswaAbsenSaveTransRequest calls the generic PostMahasiswaAbsenSaveTrans builder with application/json body
func NewPostMahasiswaAbsenSaveTransRequest(server string, body PostMahasiswaAbsenSaveTransJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMahasiswaAbsenSaveTransRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMahasiswaAbsenSaveTransRequestWithBody generates requests for PostMahasiswaAbsenSaveTrans with any type of body
func NewPostMahasiswaAbsenSaveTransRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mahasiswa/absen/save-trans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMahasiswaAbsenIdPertemuanRequest generates requests for DeleteMahasiswaAbsenIdPertemuan
func NewDeleteMahasiswaAbsenIdPertemuanRequest(server string, idPertemuan int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idPertemuan", runtime.ParamLocationPath, idPertemuan)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mahasiswa/absen/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMataKuliahRequest generates requests for GetMataKuliah
func NewGetMataKuliahRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mata-kuliah")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPerubahanJadwalRequest generates requests for GetPerubahanJadwal
func NewGetPerubahanJadwalRequest(server string, params *GetPerubahanJadwalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/perubahan-jadwal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPerubahanJadwalIdJadwalPertemuanRequest calls the generic PatchPerubahanJadwalIdJadwalPertemuan builder with application/json body
func NewPatchPerubahanJadwalIdJadwalPertemuanRequest(server string, idJadwalPertemuan int, body PatchPerubahanJadwalIdJadwalPertemuanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPerubahanJadwalIdJadwalPertemuanRequestWithBody(server, idJadwalPertemuan, "application/json", bodyReader)
}

// NewPatchPerubahanJadwalIdJadwalPertemuanRequestWithBody generates requests for PatchPerubahanJadwalIdJadwalPertemuan with any type of body
func NewPatchPerubahanJadwalIdJadwalPertemuanRequestWithBody(server string, idJadwalPertemuan int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "idJadwalPertemuan", runtime.ParamLocationPath, idJadwalPertemuan)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/perubahan-jadwal/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTokenRequest generates requests for GetToken
func NewGetTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDosenWithResponse request
	GetDosenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDosenResponse, error)

	// GetJadwalKuliahWithResponse request
	GetJadwalKuliahWithResponse(ctx context.Context, params *GetJadwalKuliahParams, reqEditors ...RequestEditorFn) (*GetJadwalKuliahResponse, error)

	// GetJadwalKuliahDosenWithResponse request
	GetJadwalKuliahDosenWithResponse(ctx context.Context, params *GetJadwalKuliahDosenParams, reqEditors ...RequestEditorFn) (*GetJadwalKuliahDosenResponse, error)

	// GetJadwalKuliahDosenKelasWithResponse request
	GetJadwalKuliahDosenKelasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJadwalKuliahDosenKelasResponse, error)

	// PostJadwalKuliahDosenMahasiswaWithBodyWithResponse request with any body
	PostJadwalKuliahDosenMahasiswaWithBodyWithResponse(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenMahasiswaResponse, error)

	PostJadwalKuliahDosenMahasiswaWithResponse(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, body PostJadwalKuliahDosenMahasiswaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenMahasiswaResponse, error)

	// PostJadwalKuliahDosenSaveTransWithBodyWithResponse request with any body
	PostJadwalKuliahDosenSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenSaveTransResponse, error)

	PostJadwalKuliahDosenSaveTransWithResponse(ctx context.Context, body PostJadwalKuliahDosenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenSaveTransResponse, error)

	// DeleteJadwalKuliahDosenIdWithResponse request
	DeleteJadwalKuliahDosenIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteJadwalKuliahDosenIdResponse, error)

	// PostJadwalKuliahSaveTransWithBodyWithResponse request with any body
	PostJadwalKuliahSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJadwalKuliahSaveTransResponse, error)

	PostJadwalKuliahSaveTransWithResponse(ctx context.Context, body PostJadwalKuliahSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJadwalKuliahSaveTransResponse, error)

	// DeleteJadwalKuliahIdWithResponse request
	DeleteJadwalKuliahIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteJadwalKuliahIdResponse, error)

	// GetJamKuliahWithResponse request
	GetJamKuliahWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJamKuliahResponse, error)

	// GetLaporanPerkuliahanWithResponse request
	GetLaporanPerkuliahanWithResponse(ctx context.Context, params *GetLaporanPerkuliahanParams, reqEditors ...RequestEditorFn) (*GetLaporanPerkuliahanResponse, error)

	// PostLaporanPerkuliahanSaveTransWithBodyWithResponse request with any body
	PostLaporanPerkuliahanSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanSaveTransResponse, error)

	PostLaporanPerkuliahanSaveTransWithFormdataBodyWithResponse(ctx context.Context, body PostLaporanPerkuliahanSaveTransFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanSaveTransResponse, error)

	// PostLaporanPerkuliahanToPdfWithBodyWithResponse request with any body
	PostLaporanPerkuliahanToPdfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanToPdfResponse, error)

	PostLaporanPerkuliahanToPdfWithResponse(ctx context.Context, body PostLaporanPerkuliahanToPdfJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanToPdfResponse, error)

	// DeleteLaporanPerkuliahanIdPertemuanPertemuanWithResponse request
	DeleteLaporanPerkuliahanIdPertemuanPertemuanWithResponse(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse, error)

	// GetLaporanPerkuliahanIdPertemuanPertemuanWithResponse request
	GetLaporanPerkuliahanIdPertemuanPertemuanWithResponse(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*GetLaporanPerkuliahanIdPertemuanPertemuanResponse, error)

	// GetMahasiswaAbsenWithResponse request
	GetMahasiswaAbsenWithResponse(ctx context.Context, params *GetMahasiswaAbsenParams, reqEditors ...RequestEditorFn) (*GetMahasiswaAbsenResponse, error)

	// PostMahasiswaAbsenSaveTransWithBodyWithResponse request with any body
	PostMahasiswaAbsenSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMahasiswaAbsenSaveTransResponse, error)

	PostMahasiswaAbsenSaveTransWithResponse(ctx context.Context, body PostMahasiswaAbsenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMahasiswaAbsenSaveTransResponse, error)

	// DeleteMahasiswaAbsenIdPertemuanWithResponse request
	DeleteMahasiswaAbsenIdPertemuanWithResponse(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*DeleteMahasiswaAbsenIdPertemuanResponse, error)

	// GetMataKuliahWithResponse request
	GetMataKuliahWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMataKuliahResponse, error)

	// GetPerubahanJadwalWithResponse request
	GetPerubahanJadwalWithResponse(ctx context.Context, params *GetPerubahanJadwalParams, reqEditors ...RequestEditorFn) (*GetPerubahanJadwalResponse, error)

	// PatchPerubahanJadwalIdJadwalPertemuanWithBodyWithResponse request with any body
	PatchPerubahanJadwalIdJadwalPertemuanWithBodyWithResponse(ctx context.Context, idJadwalPertemuan int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPerubahanJadwalIdJadwalPertemuanResponse, error)

	PatchPerubahanJadwalIdJadwalPertemuanWithResponse(ctx context.Context, idJadwalPertemuan int, body PatchPerubahanJadwalIdJadwalPertemuanJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPerubahanJadwalIdJadwalPertemuanResponse, error)

	// GetTokenWithResponse request
	GetTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenResponse, error)
}

type GetDosenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseArrayModelsGetAllDosen
}

// Status returns HTTPResponse.Status
func (r GetDosenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDosenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJadwalKuliahResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseArrayModelsGetAllJadwalKuliahResponse
}

// Status returns HTTPResponse.Status
func (r GetJadwalKuliahResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJadwalKuliahResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJadwalKuliahDosenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r GetJadwalKuliahDosenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJadwalKuliahDosenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJadwalKuliahDosenKelasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseArrayEntitiesKelas
}

// Status returns HTTPResponse.Status
func (r GetJadwalKuliahDosenKelasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJadwalKuliahDosenKelasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJadwalKuliahDosenMahasiswaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r PostJadwalKuliahDosenMahasiswaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJadwalKuliahDosenMahasiswaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJadwalKuliahDosenSaveTransResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r PostJadwalKuliahDosenSaveTransResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJadwalKuliahDosenSaveTransResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJadwalKuliahDosenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r DeleteJadwalKuliahDosenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJadwalKuliahDosenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJadwalKuliahSaveTransResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r PostJadwalKuliahSaveTransResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJadwalKuliahSaveTransResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJadwalKuliahIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r DeleteJadwalKuliahIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJadwalKuliahIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJamKuliahResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseArrayModelsGetAllJamKuliah
}

// Status returns HTTPResponse.Status
func (r GetJamKuliahResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJamKuliahResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLaporanPerkuliahanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r GetLaporanPerkuliahanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLaporanPerkuliahanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLaporanPerkuliahanSaveTransResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r PostLaporanPerkuliahanSaveTransResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLaporanPerkuliahanSaveTransResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLaporanPerkuliahanToPdfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLaporanPerkuliahanToPdfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLaporanPerkuliahanToPdfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLaporanPerkuliahanIdPertemuanPertemuanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseEntitiesAngketDosen
}

// Status returns HTTPResponse.Status
func (r GetLaporanPerkuliahanIdPertemuanPertemuanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLaporanPerkuliahanIdPertemuanPertemuanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMahasiswaAbsenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseModelsGetAllAbsenResponse
}

// Status returns HTTPResponse.Status
func (r GetMahasiswaAbsenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMahasiswaAbsenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMahasiswaAbsenSaveTransResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r PostMahasiswaAbsenSaveTransResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMahasiswaAbsenSaveTransResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMahasiswaAbsenIdPertemuanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r DeleteMahasiswaAbsenIdPertemuanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMahasiswaAbsenIdPertemuanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMataKuliahResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseArrayModelsMataKuliah
}

// Status returns HTTPResponse.Status
func (r GetMataKuliahResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMataKuliahResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPerubahanJadwalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseArrayModelsGetAllPerubahanJadwal
}

// Status returns HTTPResponse.Status
func (r GetPerubahanJadwalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPerubahanJadwalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPerubahanJadwalIdJadwalPertemuanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *ModelsBaseResponseAny
}

// Status returns HTTPResponse.Status
func (r PatchPerubahanJadwalIdJadwalPertemuanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPerubahanJadwalIdJadwalPertemuanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsBaseResponseHandlersTokenResponse
}

// Status returns HTTPResponse.Status
func (r GetTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDosenWithResponse request returning *GetDosenResponse
func (c *ClientWithResponses) GetDosenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDosenResponse, error) {
	rsp, err := c.GetDosen(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDosenResponse(rsp)
}

// GetJadwalKuliahWithResponse request returning *GetJadwalKuliahResponse
func (c *ClientWithResponses) GetJadwalKuliahWithResponse(ctx context.Context, params *GetJadwalKuliahParams, reqEditors ...RequestEditorFn) (*GetJadwalKuliahResponse, error) {
	rsp, err := c.GetJadwalKuliah(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJadwalKuliahResponse(rsp)
}

// GetJadwalKuliahDosenWithResponse request returning *GetJadwalKuliahDosenResponse
func (c *ClientWithResponses) GetJadwalKuliahDosenWithResponse(ctx context.Context, params *GetJadwalKuliahDosenParams, reqEditors ...RequestEditorFn) (*GetJadwalKuliahDosenResponse, error) {
	rsp, err := c.GetJadwalKuliahDosen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJadwalKuliahDosenResponse(rsp)
}

// GetJadwalKuliahDosenKelasWithResponse request returning *GetJadwalKuliahDosenKelasResponse
func (c *ClientWithResponses) GetJadwalKuliahDosenKelasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJadwalKuliahDosenKelasResponse, error) {
	rsp, err := c.GetJadwalKuliahDosenKelas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJadwalKuliahDosenKelasResponse(rsp)
}

// PostJadwalKuliahDosenMahasiswaWithBodyWithResponse request with arbitrary body returning *PostJadwalKuliahDosenMahasiswaResponse
func (c *ClientWithResponses) PostJadwalKuliahDosenMahasiswaWithBodyWithResponse(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenMahasiswaResponse, error) {
	rsp, err := c.PostJadwalKuliahDosenMahasiswaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJadwalKuliahDosenMahasiswaResponse(rsp)
}

func (c *ClientWithResponses) PostJadwalKuliahDosenMahasiswaWithResponse(ctx context.Context, params *PostJadwalKuliahDosenMahasiswaParams, body PostJadwalKuliahDosenMahasiswaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenMahasiswaResponse, error) {
	rsp, err := c.PostJadwalKuliahDosenMahasiswa(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJadwalKuliahDosenMahasiswaResponse(rsp)
}

// PostJadwalKuliahDosenSaveTransWithBodyWithResponse request with arbitrary body returning *PostJadwalKuliahDosenSaveTransResponse
func (c *ClientWithResponses) PostJadwalKuliahDosenSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenSaveTransResponse, error) {
	rsp, err := c.PostJadwalKuliahDosenSaveTransWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJadwalKuliahDosenSaveTransResponse(rsp)
}

func (c *ClientWithResponses) PostJadwalKuliahDosenSaveTransWithResponse(ctx context.Context, body PostJadwalKuliahDosenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJadwalKuliahDosenSaveTransResponse, error) {
	rsp, err := c.PostJadwalKuliahDosenSaveTrans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJadwalKuliahDosenSaveTransResponse(rsp)
}

// DeleteJadwalKuliahDosenIdWithResponse request returning *DeleteJadwalKuliahDosenIdResponse
func (c *ClientWithResponses) DeleteJadwalKuliahDosenIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteJadwalKuliahDosenIdResponse, error) {
	rsp, err := c.DeleteJadwalKuliahDosenId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJadwalKuliahDosenIdResponse(rsp)
}

// PostJadwalKuliahSaveTransWithBodyWithResponse request with arbitrary body returning *PostJadwalKuliahSaveTransResponse
func (c *ClientWithResponses) PostJadwalKuliahSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJadwalKuliahSaveTransResponse, error) {
	rsp, err := c.PostJadwalKuliahSaveTransWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJadwalKuliahSaveTransResponse(rsp)
}

func (c *ClientWithResponses) PostJadwalKuliahSaveTransWithResponse(ctx context.Context, body PostJadwalKuliahSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJadwalKuliahSaveTransResponse, error) {
	rsp, err := c.PostJadwalKuliahSaveTrans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJadwalKuliahSaveTransResponse(rsp)
}

// DeleteJadwalKuliahIdWithResponse request returning *DeleteJadwalKuliahIdResponse
func (c *ClientWithResponses) DeleteJadwalKuliahIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteJadwalKuliahIdResponse, error) {
	rsp, err := c.DeleteJadwalKuliahId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJadwalKuliahIdResponse(rsp)
}

// GetJamKuliahWithResponse request returning *GetJamKuliahResponse
func (c *ClientWithResponses) GetJamKuliahWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJamKuliahResponse, error) {
	rsp, err := c.GetJamKuliah(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJamKuliahResponse(rsp)
}

// GetLaporanPerkuliahanWithResponse request returning *GetLaporanPerkuliahanResponse
func (c *ClientWithResponses) GetLaporanPerkuliahanWithResponse(ctx context.Context, params *GetLaporanPerkuliahanParams, reqEditors ...RequestEditorFn) (*GetLaporanPerkuliahanResponse, error) {
	rsp, err := c.GetLaporanPerkuliahan(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLaporanPerkuliahanResponse(rsp)
}

// PostLaporanPerkuliahanSaveTransWithBodyWithResponse request with arbitrary body returning *PostLaporanPerkuliahanSaveTransResponse
func (c *ClientWithResponses) PostLaporanPerkuliahanSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanSaveTransResponse, error) {
	rsp, err := c.PostLaporanPerkuliahanSaveTransWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLaporanPerkuliahanSaveTransResponse(rsp)
}

func (c *ClientWithResponses) PostLaporanPerkuliahanSaveTransWithFormdataBodyWithResponse(ctx context.Context, body PostLaporanPerkuliahanSaveTransFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanSaveTransResponse, error) {
	rsp, err := c.PostLaporanPerkuliahanSaveTransWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLaporanPerkuliahanSaveTransResponse(rsp)
}

// PostLaporanPerkuliahanToPdfWithBodyWithResponse request with arbitrary body returning *PostLaporanPerkuliahanToPdfResponse
func (c *ClientWithResponses) PostLaporanPerkuliahanToPdfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanToPdfResponse, error) {
	rsp, err := c.PostLaporanPerkuliahanToPdfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLaporanPerkuliahanToPdfResponse(rsp)
}

func (c *ClientWithResponses) PostLaporanPerkuliahanToPdfWithResponse(ctx context.Context, body PostLaporanPerkuliahanToPdfJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLaporanPerkuliahanToPdfResponse, error) {
	rsp, err := c.PostLaporanPerkuliahanToPdf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLaporanPerkuliahanToPdfResponse(rsp)
}

// DeleteLaporanPerkuliahanIdPertemuanPertemuanWithResponse request returning *DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse
func (c *ClientWithResponses) DeleteLaporanPerkuliahanIdPertemuanPertemuanWithResponse(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse, error) {
	rsp, err := c.DeleteLaporanPerkuliahanIdPertemuanPertemuan(ctx, idPertemuan, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLaporanPerkuliahanIdPertemuanPertemuanResponse(rsp)
}

// GetLaporanPerkuliahanIdPertemuanPertemuanWithResponse request returning *GetLaporanPerkuliahanIdPertemuanPertemuanResponse
func (c *ClientWithResponses) GetLaporanPerkuliahanIdPertemuanPertemuanWithResponse(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*GetLaporanPerkuliahanIdPertemuanPertemuanResponse, error) {
	rsp, err := c.GetLaporanPerkuliahanIdPertemuanPertemuan(ctx, idPertemuan, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLaporanPerkuliahanIdPertemuanPertemuanResponse(rsp)
}

// GetMahasiswaAbsenWithResponse request returning *GetMahasiswaAbsenResponse
func (c *ClientWithResponses) GetMahasiswaAbsenWithResponse(ctx context.Context, params *GetMahasiswaAbsenParams, reqEditors ...RequestEditorFn) (*GetMahasiswaAbsenResponse, error) {
	rsp, err := c.GetMahasiswaAbsen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMahasiswaAbsenResponse(rsp)
}

// PostMahasiswaAbsenSaveTransWithBodyWithResponse request with arbitrary body returning *PostMahasiswaAbsenSaveTransResponse
func (c *ClientWithResponses) PostMahasiswaAbsenSaveTransWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMahasiswaAbsenSaveTransResponse, error) {
	rsp, err := c.PostMahasiswaAbsenSaveTransWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMahasiswaAbsenSaveTransResponse(rsp)
}

func (c *ClientWithResponses) PostMahasiswaAbsenSaveTransWithResponse(ctx context.Context, body PostMahasiswaAbsenSaveTransJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMahasiswaAbsenSaveTransResponse, error) {
	rsp, err := c.PostMahasiswaAbsenSaveTrans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMahasiswaAbsenSaveTransResponse(rsp)
}

// DeleteMahasiswaAbsenIdPertemuanWithResponse request returning *DeleteMahasiswaAbsenIdPertemuanResponse
func (c *ClientWithResponses) DeleteMahasiswaAbsenIdPertemuanWithResponse(ctx context.Context, idPertemuan int, reqEditors ...RequestEditorFn) (*DeleteMahasiswaAbsenIdPertemuanResponse, error) {
	rsp, err := c.DeleteMahasiswaAbsenIdPertemuan(ctx, idPertemuan, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMahasiswaAbsenIdPertemuanResponse(rsp)
}

// GetMataKuliahWithResponse request returning *GetMataKuliahResponse
func (c *ClientWithResponses) GetMataKuliahWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMataKuliahResponse, error) {
	rsp, err := c.GetMataKuliah(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMataKuliahResponse(rsp)
}

// GetPerubahanJadwalWithResponse request returning *GetPerubahanJadwalResponse
func (c *ClientWithResponses) GetPerubahanJadwalWithResponse(ctx context.Context, params *GetPerubahanJadwalParams, reqEditors ...RequestEditorFn) (*GetPerubahanJadwalResponse, error) {
	rsp, err := c.GetPerubahanJadwal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPerubahanJadwalResponse(rsp)
}

// PatchPerubahanJadwalIdJadwalPertemuanWithBodyWithResponse request with arbitrary body returning *PatchPerubahanJadwalIdJadwalPertemuanResponse
func (c *ClientWithResponses) PatchPerubahanJadwalIdJadwalPertemuanWithBodyWithResponse(ctx context.Context, idJadwalPertemuan int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPerubahanJadwalIdJadwalPertemuanResponse, error) {
	rsp, err := c.PatchPerubahanJadwalIdJadwalPertemuanWithBody(ctx, idJadwalPertemuan, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPerubahanJadwalIdJadwalPertemuanResponse(rsp)
}

func (c *ClientWithResponses) PatchPerubahanJadwalIdJadwalPertemuanWithResponse(ctx context.Context, idJadwalPertemuan int, body PatchPerubahanJadwalIdJadwalPertemuanJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPerubahanJadwalIdJadwalPertemuanResponse, error) {
	rsp, err := c.PatchPerubahanJadwalIdJadwalPertemuan(ctx, idJadwalPertemuan, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPerubahanJadwalIdJadwalPertemuanResponse(rsp)
}

// GetTokenWithResponse request returning *GetTokenResponse
func (c *ClientWithResponses) GetTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenResponse, error) {
	rsp, err := c.GetToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenResponse(rsp)
}

// ParseGetDosenResponse parses an HTTP response from a GetDosenWithResponse call
func ParseGetDosenResponse(rsp *http.Response) (*GetDosenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDosenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseArrayModelsGetAllDosen
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJadwalKuliahResponse parses an HTTP response from a GetJadwalKuliahWithResponse call
func ParseGetJadwalKuliahResponse(rsp *http.Response) (*GetJadwalKuliahResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJadwalKuliahResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseArrayModelsGetAllJadwalKuliahResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJadwalKuliahDosenResponse parses an HTTP response from a GetJadwalKuliahDosenWithResponse call
func ParseGetJadwalKuliahDosenResponse(rsp *http.Response) (*GetJadwalKuliahDosenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJadwalKuliahDosenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJadwalKuliahDosenKelasResponse parses an HTTP response from a GetJadwalKuliahDosenKelasWithResponse call
func ParseGetJadwalKuliahDosenKelasResponse(rsp *http.Response) (*GetJadwalKuliahDosenKelasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJadwalKuliahDosenKelasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseArrayEntitiesKelas
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostJadwalKuliahDosenMahasiswaResponse parses an HTTP response from a PostJadwalKuliahDosenMahasiswaWithResponse call
func ParsePostJadwalKuliahDosenMahasiswaResponse(rsp *http.Response) (*PostJadwalKuliahDosenMahasiswaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJadwalKuliahDosenMahasiswaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostJadwalKuliahDosenSaveTransResponse parses an HTTP response from a PostJadwalKuliahDosenSaveTransWithResponse call
func ParsePostJadwalKuliahDosenSaveTransResponse(rsp *http.Response) (*PostJadwalKuliahDosenSaveTransResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJadwalKuliahDosenSaveTransResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseDeleteJadwalKuliahDosenIdResponse parses an HTTP response from a DeleteJadwalKuliahDosenIdWithResponse call
func ParseDeleteJadwalKuliahDosenIdResponse(rsp *http.Response) (*DeleteJadwalKuliahDosenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJadwalKuliahDosenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParsePostJadwalKuliahSaveTransResponse parses an HTTP response from a PostJadwalKuliahSaveTransWithResponse call
func ParsePostJadwalKuliahSaveTransResponse(rsp *http.Response) (*PostJadwalKuliahSaveTransResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJadwalKuliahSaveTransResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteJadwalKuliahIdResponse parses an HTTP response from a DeleteJadwalKuliahIdWithResponse call
func ParseDeleteJadwalKuliahIdResponse(rsp *http.Response) (*DeleteJadwalKuliahIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJadwalKuliahIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJamKuliahResponse parses an HTTP response from a GetJamKuliahWithResponse call
func ParseGetJamKuliahResponse(rsp *http.Response) (*GetJamKuliahResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJamKuliahResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseArrayModelsGetAllJamKuliah
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLaporanPerkuliahanResponse parses an HTTP response from a GetLaporanPerkuliahanWithResponse call
func ParseGetLaporanPerkuliahanResponse(rsp *http.Response) (*GetLaporanPerkuliahanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLaporanPerkuliahanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLaporanPerkuliahanSaveTransResponse parses an HTTP response from a PostLaporanPerkuliahanSaveTransWithResponse call
func ParsePostLaporanPerkuliahanSaveTransResponse(rsp *http.Response) (*PostLaporanPerkuliahanSaveTransResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLaporanPerkuliahanSaveTransResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLaporanPerkuliahanToPdfResponse parses an HTTP response from a PostLaporanPerkuliahanToPdfWithResponse call
func ParsePostLaporanPerkuliahanToPdfResponse(rsp *http.Response) (*PostLaporanPerkuliahanToPdfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLaporanPerkuliahanToPdfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteLaporanPerkuliahanIdPertemuanPertemuanResponse parses an HTTP response from a DeleteLaporanPerkuliahanIdPertemuanPertemuanWithResponse call
func ParseDeleteLaporanPerkuliahanIdPertemuanPertemuanResponse(rsp *http.Response) (*DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLaporanPerkuliahanIdPertemuanPertemuanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseGetLaporanPerkuliahanIdPertemuanPertemuanResponse parses an HTTP response from a GetLaporanPerkuliahanIdPertemuanPertemuanWithResponse call
func ParseGetLaporanPerkuliahanIdPertemuanPertemuanResponse(rsp *http.Response) (*GetLaporanPerkuliahanIdPertemuanPertemuanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLaporanPerkuliahanIdPertemuanPertemuanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseEntitiesAngketDosen
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMahasiswaAbsenResponse parses an HTTP response from a GetMahasiswaAbsenWithResponse call
func ParseGetMahasiswaAbsenResponse(rsp *http.Response) (*GetMahasiswaAbsenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMahasiswaAbsenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseModelsGetAllAbsenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMahasiswaAbsenSaveTransResponse parses an HTTP response from a PostMahasiswaAbsenSaveTransWithResponse call
func ParsePostMahasiswaAbsenSaveTransResponse(rsp *http.Response) (*PostMahasiswaAbsenSaveTransResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMahasiswaAbsenSaveTransResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMahasiswaAbsenIdPertemuanResponse parses an HTTP response from a DeleteMahasiswaAbsenIdPertemuanWithResponse call
func ParseDeleteMahasiswaAbsenIdPertemuanResponse(rsp *http.Response) (*DeleteMahasiswaAbsenIdPertemuanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMahasiswaAbsenIdPertemuanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseGetMataKuliahResponse parses an HTTP response from a GetMataKuliahWithResponse call
func ParseGetMataKuliahResponse(rsp *http.Response) (*GetMataKuliahResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMataKuliahResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseArrayModelsMataKuliah
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPerubahanJadwalResponse parses an HTTP response from a GetPerubahanJadwalWithResponse call
func ParseGetPerubahanJadwalResponse(rsp *http.Response) (*GetPerubahanJadwalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPerubahanJadwalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseArrayModelsGetAllPerubahanJadwal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchPerubahanJadwalIdJadwalPertemuanResponse parses an HTTP response from a PatchPerubahanJadwalIdJadwalPertemuanWithResponse call
func ParsePatchPerubahanJadwalIdJadwalPertemuanResponse(rsp *http.Response) (*PatchPerubahanJadwalIdJadwalPertemuanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPerubahanJadwalIdJadwalPertemuanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest ModelsBaseResponseAny
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseGetTokenResponse parses an HTTP response from a GetTokenWithResponse call
func ParseGetTokenResponse(rsp *http.Response) (*GetTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsBaseResponseHandlersTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
