// Package boilerplate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package boilerplate

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Dosen
	// (GET /dosen)
	GetDosen(c *gin.Context)
	// Get Jadwal Kuliah
	// (GET /jadwal-kuliah)
	GetJadwalKuliah(c *gin.Context, params GetJadwalKuliahParams)
	// Get All Jadwal Kuliah Dosen
	// (GET /jadwal-kuliah-dosen/)
	GetJadwalKuliahDosen(c *gin.Context, params GetJadwalKuliahDosenParams)
	// Get All Kelas
	// (GET /jadwal-kuliah-dosen/kelas)
	GetJadwalKuliahDosenKelas(c *gin.Context)
	// Get All Mahasiswa
	// (POST /jadwal-kuliah-dosen/mahasiswa)
	PostJadwalKuliahDosenMahasiswa(c *gin.Context, params PostJadwalKuliahDosenMahasiswaParams)
	// Save Trans Jadwal Kuliah
	// (POST /jadwal-kuliah-dosen/save-trans)
	PostJadwalKuliahDosenSaveTrans(c *gin.Context)
	// delete Trans Jadwal Kuliah
	// (DELETE /jadwal-kuliah-dosen/{id})
	DeleteJadwalKuliahDosenId(c *gin.Context, id int)
	// Save Trans Jadwal Kuliah
	// (POST /jadwal-kuliah/save-trans)
	PostJadwalKuliahSaveTrans(c *gin.Context)
	// delete Trans Jadwal Kuliah
	// (DELETE /jadwal-kuliah/{id})
	DeleteJadwalKuliahId(c *gin.Context, id int)
	// Get JamKuliah
	// (GET /jam-kuliah)
	GetJamKuliah(c *gin.Context)
	// Get All Laporan Perkuliahan
	// (GET /laporan-perkuliahan/)
	GetLaporanPerkuliahan(c *gin.Context, params GetLaporanPerkuliahanParams)
	// SaveTrans
	// (POST /laporan-perkuliahan/save-trans)
	PostLaporanPerkuliahanSaveTrans(c *gin.Context)
	// To PDF
	// (POST /laporan-perkuliahan/to-pdf)
	PostLaporanPerkuliahanToPdf(c *gin.Context)
	// Delete Angket Dosen
	// (DELETE /laporan-perkuliahan/{id-pertemuan}/pertemuan)
	DeleteLaporanPerkuliahanIdPertemuanPertemuan(c *gin.Context, idPertemuan int)
	// Get All Laporan Perkuliahan By Pertemuan
	// (GET /laporan-perkuliahan/{id-pertemuan}/pertemuan)
	GetLaporanPerkuliahanIdPertemuanPertemuan(c *gin.Context, idPertemuan int)
	// Get Absen Mahasiswa
	// (GET /mahasiswa/absen)
	GetMahasiswaAbsen(c *gin.Context, params GetMahasiswaAbsenParams)
	// Save Absen Trans
	// (POST /mahasiswa/absen/save-trans)
	PostMahasiswaAbsenSaveTrans(c *gin.Context)
	// Delete Absen
	// (DELETE /mahasiswa/absen/{idPertemuan})
	DeleteMahasiswaAbsenIdPertemuan(c *gin.Context, idPertemuan int)
	// Get Matakuliah
	// (GET /mata-kuliah)
	GetMataKuliah(c *gin.Context)
	// Get Perubahan Jadwal
	// (GET /perubahan-jadwal)
	GetPerubahanJadwal(c *gin.Context, params GetPerubahanJadwalParams)
	// Update Perubahan Jadwal
	// (PATCH /perubahan-jadwal/{idJadwalPertemuan})
	PatchPerubahanJadwalIdJadwalPertemuan(c *gin.Context, idJadwalPertemuan int)
	// Get Token
	// (GET /token)
	GetToken(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDosen operation middleware
func (siw *ServerInterfaceWrapper) GetDosen(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDosen(c)
}

// GetJadwalKuliah operation middleware
func (siw *ServerInterfaceWrapper) GetJadwalKuliah(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJadwalKuliahParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJadwalKuliah(c, params)
}

// GetJadwalKuliahDosen operation middleware
func (siw *ServerInterfaceWrapper) GetJadwalKuliahDosen(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJadwalKuliahDosenParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJadwalKuliahDosen(c, params)
}

// GetJadwalKuliahDosenKelas operation middleware
func (siw *ServerInterfaceWrapper) GetJadwalKuliahDosenKelas(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJadwalKuliahDosenKelas(c)
}

// PostJadwalKuliahDosenMahasiswa operation middleware
func (siw *ServerInterfaceWrapper) PostJadwalKuliahDosenMahasiswa(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostJadwalKuliahDosenMahasiswaParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostJadwalKuliahDosenMahasiswa(c, params)
}

// PostJadwalKuliahDosenSaveTrans operation middleware
func (siw *ServerInterfaceWrapper) PostJadwalKuliahDosenSaveTrans(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostJadwalKuliahDosenSaveTrans(c)
}

// DeleteJadwalKuliahDosenId operation middleware
func (siw *ServerInterfaceWrapper) DeleteJadwalKuliahDosenId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteJadwalKuliahDosenId(c, id)
}

// PostJadwalKuliahSaveTrans operation middleware
func (siw *ServerInterfaceWrapper) PostJadwalKuliahSaveTrans(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostJadwalKuliahSaveTrans(c)
}

// DeleteJadwalKuliahId operation middleware
func (siw *ServerInterfaceWrapper) DeleteJadwalKuliahId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteJadwalKuliahId(c, id)
}

// GetJamKuliah operation middleware
func (siw *ServerInterfaceWrapper) GetJamKuliah(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJamKuliah(c)
}

// GetLaporanPerkuliahan operation middleware
func (siw *ServerInterfaceWrapper) GetLaporanPerkuliahan(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLaporanPerkuliahanParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLaporanPerkuliahan(c, params)
}

// PostLaporanPerkuliahanSaveTrans operation middleware
func (siw *ServerInterfaceWrapper) PostLaporanPerkuliahanSaveTrans(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLaporanPerkuliahanSaveTrans(c)
}

// PostLaporanPerkuliahanToPdf operation middleware
func (siw *ServerInterfaceWrapper) PostLaporanPerkuliahanToPdf(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLaporanPerkuliahanToPdf(c)
}

// DeleteLaporanPerkuliahanIdPertemuanPertemuan operation middleware
func (siw *ServerInterfaceWrapper) DeleteLaporanPerkuliahanIdPertemuanPertemuan(c *gin.Context) {

	var err error

	// ------------- Path parameter "id-pertemuan" -------------
	var idPertemuan int

	err = runtime.BindStyledParameterWithOptions("simple", "id-pertemuan", c.Param("id-pertemuan"), &idPertemuan, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id-pertemuan: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteLaporanPerkuliahanIdPertemuanPertemuan(c, idPertemuan)
}

// GetLaporanPerkuliahanIdPertemuanPertemuan operation middleware
func (siw *ServerInterfaceWrapper) GetLaporanPerkuliahanIdPertemuanPertemuan(c *gin.Context) {

	var err error

	// ------------- Path parameter "id-pertemuan" -------------
	var idPertemuan int

	err = runtime.BindStyledParameterWithOptions("simple", "id-pertemuan", c.Param("id-pertemuan"), &idPertemuan, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id-pertemuan: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLaporanPerkuliahanIdPertemuanPertemuan(c, idPertemuan)
}

// GetMahasiswaAbsen operation middleware
func (siw *ServerInterfaceWrapper) GetMahasiswaAbsen(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMahasiswaAbsenParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "smtId" -------------

	if paramValue := c.Query("smtId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument smtId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "smtId", c.Request.URL.Query(), &params.SmtId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smtId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "kelasId" -------------

	if paramValue := c.Query("kelasId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument kelasId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "kelasId", c.Request.URL.Query(), &params.KelasId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kelasId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMahasiswaAbsen(c, params)
}

// PostMahasiswaAbsenSaveTrans operation middleware
func (siw *ServerInterfaceWrapper) PostMahasiswaAbsenSaveTrans(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMahasiswaAbsenSaveTrans(c)
}

// DeleteMahasiswaAbsenIdPertemuan operation middleware
func (siw *ServerInterfaceWrapper) DeleteMahasiswaAbsenIdPertemuan(c *gin.Context) {

	var err error

	// ------------- Path parameter "idPertemuan" -------------
	var idPertemuan int

	err = runtime.BindStyledParameterWithOptions("simple", "idPertemuan", c.Param("idPertemuan"), &idPertemuan, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idPertemuan: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMahasiswaAbsenIdPertemuan(c, idPertemuan)
}

// GetMataKuliah operation middleware
func (siw *ServerInterfaceWrapper) GetMataKuliah(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMataKuliah(c)
}

// GetPerubahanJadwal operation middleware
func (siw *ServerInterfaceWrapper) GetPerubahanJadwal(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPerubahanJadwalParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPerubahanJadwal(c, params)
}

// PatchPerubahanJadwalIdJadwalPertemuan operation middleware
func (siw *ServerInterfaceWrapper) PatchPerubahanJadwalIdJadwalPertemuan(c *gin.Context) {

	var err error

	// ------------- Path parameter "idJadwalPertemuan" -------------
	var idJadwalPertemuan int

	err = runtime.BindStyledParameterWithOptions("simple", "idJadwalPertemuan", c.Param("idJadwalPertemuan"), &idJadwalPertemuan, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idJadwalPertemuan: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchPerubahanJadwalIdJadwalPertemuan(c, idJadwalPertemuan)
}

// GetToken operation middleware
func (siw *ServerInterfaceWrapper) GetToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetToken(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/dosen", wrapper.GetDosen)
	router.GET(options.BaseURL+"/jadwal-kuliah", wrapper.GetJadwalKuliah)
	router.GET(options.BaseURL+"/jadwal-kuliah-dosen/", wrapper.GetJadwalKuliahDosen)
	router.GET(options.BaseURL+"/jadwal-kuliah-dosen/kelas", wrapper.GetJadwalKuliahDosenKelas)
	router.POST(options.BaseURL+"/jadwal-kuliah-dosen/mahasiswa", wrapper.PostJadwalKuliahDosenMahasiswa)
	router.POST(options.BaseURL+"/jadwal-kuliah-dosen/save-trans", wrapper.PostJadwalKuliahDosenSaveTrans)
	router.DELETE(options.BaseURL+"/jadwal-kuliah-dosen/:id", wrapper.DeleteJadwalKuliahDosenId)
	router.POST(options.BaseURL+"/jadwal-kuliah/save-trans", wrapper.PostJadwalKuliahSaveTrans)
	router.DELETE(options.BaseURL+"/jadwal-kuliah/:id", wrapper.DeleteJadwalKuliahId)
	router.GET(options.BaseURL+"/jam-kuliah", wrapper.GetJamKuliah)
	router.GET(options.BaseURL+"/laporan-perkuliahan/", wrapper.GetLaporanPerkuliahan)
	router.POST(options.BaseURL+"/laporan-perkuliahan/save-trans", wrapper.PostLaporanPerkuliahanSaveTrans)
	router.POST(options.BaseURL+"/laporan-perkuliahan/to-pdf", wrapper.PostLaporanPerkuliahanToPdf)
	router.DELETE(options.BaseURL+"/laporan-perkuliahan/:id-pertemuan/pertemuan", wrapper.DeleteLaporanPerkuliahanIdPertemuanPertemuan)
	router.GET(options.BaseURL+"/laporan-perkuliahan/:id-pertemuan/pertemuan", wrapper.GetLaporanPerkuliahanIdPertemuanPertemuan)
	router.GET(options.BaseURL+"/mahasiswa/absen", wrapper.GetMahasiswaAbsen)
	router.POST(options.BaseURL+"/mahasiswa/absen/save-trans", wrapper.PostMahasiswaAbsenSaveTrans)
	router.DELETE(options.BaseURL+"/mahasiswa/absen/:idPertemuan", wrapper.DeleteMahasiswaAbsenIdPertemuan)
	router.GET(options.BaseURL+"/mata-kuliah", wrapper.GetMataKuliah)
	router.GET(options.BaseURL+"/perubahan-jadwal", wrapper.GetPerubahanJadwal)
	router.PATCH(options.BaseURL+"/perubahan-jadwal/:idJadwalPertemuan", wrapper.PatchPerubahanJadwalIdJadwalPertemuan)
	router.GET(options.BaseURL+"/token", wrapper.GetToken)
}
